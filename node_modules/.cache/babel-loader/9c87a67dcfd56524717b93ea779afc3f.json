{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n\n/* eslint-disable max-classes-per-file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport clonedeep from 'lodash.clonedeep';\nimport createProxyRoot from './helpers/proxyRoot';\nimport { EventProvider } from './components/EventContext';\nimport registeredPlugins from './plugins/plugins';\nimport getSerialized from './helpers/getSerialized';\n\nclass WebComponentFactory {\n  constructor(componentProperties, rootComponent, shadow, anonymousSlot, plugins, connectCallback) {\n    this.componentProperties = componentProperties;\n    this.rootComponent = rootComponent;\n    this.shadow = shadow;\n    this.anonymousSlot = anonymousSlot;\n    this.plugins = plugins;\n    this.connectCallback = connectCallback;\n    this.componentAttributes = {};\n    this.reflectPropertiesToAttributes();\n  }\n  /**\n   * All properties with primitive values are added to attributes.\n   */\n\n\n  reflectPropertiesToAttributes() {\n    Object.entries(this.componentProperties).forEach(_ref => {\n      let [key, value] = _ref;\n\n      if (typeof value !== 'number' && typeof value !== 'string' && typeof value !== 'boolean') {\n        return;\n      }\n\n      this.componentAttributes[key.toLowerCase()] = {\n        property: key,\n        value\n      };\n    });\n  }\n  /**\n   * Create new class that will serve as the Web Component.\n   */\n\n\n  create() {\n    const factory = this;\n    return class WebComponent extends HTMLElement {\n      constructor() {\n        super();\n        this.initialProperties = clonedeep(factory.componentProperties);\n        this.properties = {};\n        this.hasConnected = false;\n        /**\n         * Dispatch an event from the Web Component\n         */\n\n        this.eventDispatcher = event => {\n          this.dispatchEvent(event);\n        };\n\n        this.transferInitialProperties();\n        this.subscribeToProperties();\n      }\n      /**\n       * Observe attributes for changes.\n       * Part of the Web Component Standard.\n       */\n\n\n      static get observedAttributes() {\n        return Object.keys(factory.componentAttributes);\n      }\n      /**\n       * Web Component gets mounted on the DOM.\n       */\n\n\n      connectedCallback() {\n        var _a;\n\n        this.mountReactApp({\n          initial: true\n        });\n        this.hasConnected = true;\n        (_a = factory.connectCallback) === null || _a === void 0 ? void 0 : _a.call(factory, this);\n      }\n      /**\n       * When an attribute is changed, this callback function is called.\n       * @param name name of the attribute\n       * @param oldValue value before change\n       * @param newValue value after change\n       */\n\n\n      attributeChangedCallback(name, oldValue, newValue) {\n        if (!this.hasConnected) {\n          return;\n        }\n\n        if (oldValue === newValue) {\n          return;\n        }\n\n        if (!factory.componentAttributes.hasOwnProperty(name)) {\n          return;\n        }\n\n        const propertyName = factory.componentAttributes[name].property;\n        this.properties[propertyName] = getSerialized(newValue);\n        this.mountReactApp();\n      }\n      /**\n       * When a property is changed, this callback function is called.\n       * @param name name of the property\n       * @param oldValue value before change\n       * @param newValue value after change\n       */\n\n\n      propertyChangedCallback(name, oldValue, newValue) {\n        if (!this.hasConnected) {\n          return;\n        }\n\n        if (oldValue === newValue) {\n          return;\n        }\n\n        this.properties[name] = newValue;\n        this.mountReactApp();\n      }\n      /**\n       * Web Component gets unmounted from the DOM.\n       */\n\n\n      disconnectedCallback() {\n        ReactDOM.unmountComponentAtNode(this);\n      }\n      /**\n       * Setup getters and setters for all properties.\n       * Here we ensure that the 'propertyChangedCallback' will get invoked\n       * when a property changes.\n       */\n\n\n      subscribeToProperties() {\n        const propertyMap = {};\n        Object.keys(this.initialProperties).forEach(key => {\n          propertyMap[key] = {\n            configurable: true,\n            enumerable: true,\n            get: () => {\n              const currentValue = this.properties.hasOwnProperty(key) ? this.properties[key] : this.initialProperties[key];\n              return currentValue;\n            },\n            set: newValue => {\n              const oldValue = this.properties.hasOwnProperty(key) ? this.properties[key] : this.initialProperties[key];\n              this.propertyChangedCallback(key, oldValue, newValue);\n            }\n          };\n        });\n        Object.defineProperties(this, propertyMap);\n      }\n      /**\n       * Syncronize all properties and attributes\n       */\n\n\n      syncronizePropertiesAndAttributes() {\n        Object.keys(this.initialProperties).forEach(key => {\n          if (this.properties.hasOwnProperty(key)) {\n            return;\n          }\n\n          if (this.getAttribute(key) !== null) {\n            this.properties[key] = getSerialized(this.getAttribute(key));\n            return;\n          }\n\n          this.properties[key] = this.initialProperties[key];\n        });\n      }\n      /**\n       * Transfer initial properties from the custom element.\n       */\n\n\n      transferInitialProperties() {\n        Object.keys(this.initialProperties).forEach(key => {\n          if (this.hasOwnProperty(key)) {\n            this.properties[key] = this[key];\n          }\n        });\n      }\n      /**\n       * Apply plugins\n       */\n\n\n      applyPlugins(application) {\n        const shadowChildren = [];\n        const applicationWithPlugins = registeredPlugins.reduce((app, currentPlugin) => {\n          const pluginResult = currentPlugin(this, factory.plugins, app);\n\n          if (!pluginResult) {\n            return app;\n          }\n\n          const [wrapper, shadowChild] = pluginResult;\n\n          if (shadowChild) {\n            shadowChildren.push(shadowChild);\n          }\n\n          return wrapper;\n        }, application);\n        return [applicationWithPlugins, shadowChildren];\n      }\n      /**\n       * Generate react props based on properties and attributes.\n       */\n\n\n      reactProps() {\n        this.syncronizePropertiesAndAttributes();\n        return this.properties;\n      }\n      /**\n       * Mount React App onto the Web Component\n       */\n\n\n      mountReactApp(options) {\n        const anonymousSlot = factory.anonymousSlot ? React.createElement('slot') : undefined;\n        const application = React.createElement(EventProvider, {\n          value: this.eventDispatcher\n        }, React.createElement(factory.rootComponent, this.reactProps(), anonymousSlot));\n        const [applicationWithPlugins, shadowChildren] = this.applyPlugins(application);\n\n        if (!factory.shadow) {\n          ReactDOM.render(applicationWithPlugins, this);\n          return;\n        }\n\n        let currentChildren;\n\n        if (options === null || options === void 0 ? void 0 : options.initial) {\n          currentChildren = Array.from(this.children).map(child => child.cloneNode(true));\n        }\n\n        const root = createProxyRoot(this, shadowChildren);\n        ReactDOM.render(React.createElement(root.open, null, applicationWithPlugins), this);\n\n        if (currentChildren) {\n          currentChildren.forEach(child => this.append(child));\n        }\n      }\n\n    };\n  }\n\n}\n\nexport default WebComponentFactory;","map":{"version":3,"names":["React","ReactDOM","clonedeep","createProxyRoot","EventProvider","registeredPlugins","getSerialized","WebComponentFactory","constructor","componentProperties","rootComponent","shadow","anonymousSlot","plugins","connectCallback","componentAttributes","reflectPropertiesToAttributes","Object","entries","forEach","key","value","toLowerCase","property","create","factory","WebComponent","HTMLElement","initialProperties","properties","hasConnected","eventDispatcher","event","dispatchEvent","transferInitialProperties","subscribeToProperties","observedAttributes","keys","connectedCallback","_a","mountReactApp","initial","call","attributeChangedCallback","name","oldValue","newValue","hasOwnProperty","propertyName","propertyChangedCallback","disconnectedCallback","unmountComponentAtNode","propertyMap","configurable","enumerable","get","currentValue","set","defineProperties","syncronizePropertiesAndAttributes","getAttribute","applyPlugins","application","shadowChildren","applicationWithPlugins","reduce","app","currentPlugin","pluginResult","wrapper","shadowChild","push","reactProps","options","createElement","undefined","render","currentChildren","Array","from","children","map","child","cloneNode","root","open","append"],"sources":["/Users/maxshaw/Documents/GitHub/direflow-test/node_modules/direflow-component/dist/WebComponentFactory.js"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport clonedeep from 'lodash.clonedeep';\nimport createProxyRoot from './helpers/proxyRoot';\nimport { EventProvider } from './components/EventContext';\nimport registeredPlugins from './plugins/plugins';\nimport getSerialized from './helpers/getSerialized';\nclass WebComponentFactory {\n    constructor(componentProperties, rootComponent, shadow, anonymousSlot, plugins, connectCallback) {\n        this.componentProperties = componentProperties;\n        this.rootComponent = rootComponent;\n        this.shadow = shadow;\n        this.anonymousSlot = anonymousSlot;\n        this.plugins = plugins;\n        this.connectCallback = connectCallback;\n        this.componentAttributes = {};\n        this.reflectPropertiesToAttributes();\n    }\n    /**\n     * All properties with primitive values are added to attributes.\n     */\n    reflectPropertiesToAttributes() {\n        Object.entries(this.componentProperties).forEach(([key, value]) => {\n            if (typeof value !== 'number' && typeof value !== 'string' && typeof value !== 'boolean') {\n                return;\n            }\n            this.componentAttributes[key.toLowerCase()] = {\n                property: key,\n                value,\n            };\n        });\n    }\n    /**\n     * Create new class that will serve as the Web Component.\n     */\n    create() {\n        const factory = this;\n        return class WebComponent extends HTMLElement {\n            constructor() {\n                super();\n                this.initialProperties = clonedeep(factory.componentProperties);\n                this.properties = {};\n                this.hasConnected = false;\n                /**\n                 * Dispatch an event from the Web Component\n                 */\n                this.eventDispatcher = (event) => {\n                    this.dispatchEvent(event);\n                };\n                this.transferInitialProperties();\n                this.subscribeToProperties();\n            }\n            /**\n             * Observe attributes for changes.\n             * Part of the Web Component Standard.\n             */\n            static get observedAttributes() {\n                return Object.keys(factory.componentAttributes);\n            }\n            /**\n             * Web Component gets mounted on the DOM.\n             */\n            connectedCallback() {\n                var _a;\n                this.mountReactApp({ initial: true });\n                this.hasConnected = true;\n                (_a = factory.connectCallback) === null || _a === void 0 ? void 0 : _a.call(factory, this);\n            }\n            /**\n             * When an attribute is changed, this callback function is called.\n             * @param name name of the attribute\n             * @param oldValue value before change\n             * @param newValue value after change\n             */\n            attributeChangedCallback(name, oldValue, newValue) {\n                if (!this.hasConnected) {\n                    return;\n                }\n                if (oldValue === newValue) {\n                    return;\n                }\n                if (!factory.componentAttributes.hasOwnProperty(name)) {\n                    return;\n                }\n                const propertyName = factory.componentAttributes[name].property;\n                this.properties[propertyName] = getSerialized(newValue);\n                this.mountReactApp();\n            }\n            /**\n             * When a property is changed, this callback function is called.\n             * @param name name of the property\n             * @param oldValue value before change\n             * @param newValue value after change\n             */\n            propertyChangedCallback(name, oldValue, newValue) {\n                if (!this.hasConnected) {\n                    return;\n                }\n                if (oldValue === newValue) {\n                    return;\n                }\n                this.properties[name] = newValue;\n                this.mountReactApp();\n            }\n            /**\n             * Web Component gets unmounted from the DOM.\n             */\n            disconnectedCallback() {\n                ReactDOM.unmountComponentAtNode(this);\n            }\n            /**\n             * Setup getters and setters for all properties.\n             * Here we ensure that the 'propertyChangedCallback' will get invoked\n             * when a property changes.\n             */\n            subscribeToProperties() {\n                const propertyMap = {};\n                Object.keys(this.initialProperties).forEach((key) => {\n                    propertyMap[key] = {\n                        configurable: true,\n                        enumerable: true,\n                        get: () => {\n                            const currentValue = this.properties.hasOwnProperty(key)\n                                ? this.properties[key]\n                                : this.initialProperties[key];\n                            return currentValue;\n                        },\n                        set: (newValue) => {\n                            const oldValue = this.properties.hasOwnProperty(key)\n                                ? this.properties[key]\n                                : this.initialProperties[key];\n                            this.propertyChangedCallback(key, oldValue, newValue);\n                        },\n                    };\n                });\n                Object.defineProperties(this, propertyMap);\n            }\n            /**\n             * Syncronize all properties and attributes\n             */\n            syncronizePropertiesAndAttributes() {\n                Object.keys(this.initialProperties).forEach((key) => {\n                    if (this.properties.hasOwnProperty(key)) {\n                        return;\n                    }\n                    if (this.getAttribute(key) !== null) {\n                        this.properties[key] = getSerialized(this.getAttribute(key));\n                        return;\n                    }\n                    this.properties[key] = this.initialProperties[key];\n                });\n            }\n            /**\n             * Transfer initial properties from the custom element.\n             */\n            transferInitialProperties() {\n                Object.keys(this.initialProperties).forEach((key) => {\n                    if (this.hasOwnProperty(key)) {\n                        this.properties[key] = this[key];\n                    }\n                });\n            }\n            /**\n             * Apply plugins\n             */\n            applyPlugins(application) {\n                const shadowChildren = [];\n                const applicationWithPlugins = registeredPlugins.reduce((app, currentPlugin) => {\n                    const pluginResult = currentPlugin(this, factory.plugins, app);\n                    if (!pluginResult) {\n                        return app;\n                    }\n                    const [wrapper, shadowChild] = pluginResult;\n                    if (shadowChild) {\n                        shadowChildren.push(shadowChild);\n                    }\n                    return wrapper;\n                }, application);\n                return [applicationWithPlugins, shadowChildren];\n            }\n            /**\n             * Generate react props based on properties and attributes.\n             */\n            reactProps() {\n                this.syncronizePropertiesAndAttributes();\n                return this.properties;\n            }\n            /**\n             * Mount React App onto the Web Component\n             */\n            mountReactApp(options) {\n                const anonymousSlot = factory.anonymousSlot ? React.createElement('slot') : undefined;\n                const application = (React.createElement(EventProvider, { value: this.eventDispatcher }, React.createElement(factory.rootComponent, this.reactProps(), anonymousSlot)));\n                const [applicationWithPlugins, shadowChildren] = this.applyPlugins(application);\n                if (!factory.shadow) {\n                    ReactDOM.render(applicationWithPlugins, this);\n                    return;\n                }\n                let currentChildren;\n                if (options === null || options === void 0 ? void 0 : options.initial) {\n                    currentChildren = Array.from(this.children).map((child) => child.cloneNode(true));\n                }\n                const root = createProxyRoot(this, shadowChildren);\n                ReactDOM.render(React.createElement(root.open, null, applicationWithPlugins), this);\n                if (currentChildren) {\n                    currentChildren.forEach((child) => this.append(child));\n                }\n            }\n        };\n    }\n}\nexport default WebComponentFactory;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}